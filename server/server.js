const { Telegraf } = require('telegraf');
const { Pool } = require('pg');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

let userState = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
bot.telegram.setMyCommands([
  { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: 'addexpense', description: '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥' },
]);


// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const telegramId = ctx.from.id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const userCheck = await pool.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if (userCheck.rows.length === 0) {
      await pool.query('INSERT INTO users (telegram_id, username) VALUES ($1, $2)', [
        telegramId,
        ctx.from.username || null, // –ï—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º null
      ]);
      ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    } else {
      ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }

  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/addexpense ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥');
});

// –ö–æ–º–∞–Ω–¥–∞ /addexpense ‚Äî –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
bot.command('addexpense', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üçî –ï–¥–∞', callback_data: 'category_food' },
          { text: 'üöñ –¢–∞–∫—Å–∏', callback_data: 'category_taxi' },
        ],
        [
          { text: 'üéÆ –î–æ–Ω–∞—Ç', callback_data: 'category_donation' },
          { text: 'üè¨ –ü–æ–∫—É–ø–∫–∏', callback_data: 'category_shopping' },
        ],
        [
          { text: 'üíª –¢–µ—Ö–Ω–∏–∫–∞', callback_data: 'category_tech' },
          { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç', callback_data: 'category_sport' },
        ],
        [
          { text: 'üìö –ö–Ω–∏–≥–∏', callback_data: 'category_books' },
          { text: 'üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', callback_data: 'category_entertainment' },
        ],
        [
          { text: 'üè† –î–æ–º', callback_data: 'category_home' },
          { text: 'üíº –†–∞–±–æ—Ç–∞', callback_data: 'category_work' },
        ],
        [
          { text: '‚ùì –î—Ä—É–≥–æ–µ (–≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)', callback_data: 'category_other' },
        ],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.on('callback_query', async (ctx) => {
  const telegramId = ctx.from.id;
  const categoryData = ctx.callbackQuery.data;

  if (categoryData.startsWith('category_')) {
    if (categoryData === 'category_other') {
      userState[telegramId] = { step: 'custom_category' };
      await ctx.answerCbQuery();
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:');
    }

    const category = categoryData.split('_')[1];
    userState[telegramId] = { category, step: 'amount' };

    await ctx.answerCbQuery();
    ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}". –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:`);
  } else if (categoryData.startsWith('location_')) {
    const location = categoryData.split('_')[1];
    const state = userState[telegramId];

    if (state) {
      state.location = location;

      try {
        const userCheck = await pool.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
        if (userCheck.rows.length === 0) {
          ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.');
          return;
        }

        const userId = userCheck.rows[0].id;

        await pool.query(
          `INSERT INTO expenses (user_id, category, amount, description, location)
           VALUES ($1, $2, $3, $4, $5)`,
          [userId, state.category, state.amount, state.description || null, location]
        );

        ctx.reply(
          `–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.category}\n–°—É–º–º–∞: ${state.amount}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${state.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n–õ–æ–∫–∞—Ü–∏—è: ${location}`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }

      delete userState[telegramId];
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–≤–≤–æ–¥ —Å—É–º–º—ã, –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è)
bot.on('text', async (ctx) => {
  const telegramId = ctx.from.id;
  const text = ctx.message.text;
  const state = userState[telegramId];

  if (!state) return;

  if (state.step === 'custom_category') {
    userState[telegramId].category = text;
    userState[telegramId].step = 'amount';
    ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${text}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:`);
  } else if (state.step === 'amount') {
    const amount = parseFloat(text);
    if (isNaN(amount) || amount <= 0) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250.50).');
      return;
    }

    userState[telegramId].amount = amount;
    userState[telegramId].step = 'location';

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üè† –î–æ–º–∞', callback_data: 'location_home' },
            { text: 'üíº –†–∞–±–æ—Ç–∞', callback_data: 'location_work' },
          ],
          [
            { text: 'üé¢ –ì—É–ª—è—é', callback_data: 'location_walk' },
            { text: 'üìö –£—á—ë–±–∞', callback_data: 'location_study' },
          ],
          [{ text: '‚ùì –î—Ä—É–≥–æ–µ (–≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é)', callback_data: 'location_other' }],
        ],
      },
    });
  } else if (state.step === 'location_other') {
    userState[telegramId].location = text;

    try {
      const userCheck = await pool.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
      if (userCheck.rows.length === 0) {
        ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.');
        return;
      }

      const userId = userCheck.rows[0].id;

      await pool.query(
        `INSERT INTO expenses (user_id, category, amount, description, location)
         VALUES ($1, $2, $3, $4, $5)`,
        [userId, state.category, state.amount, state.description || null, text]
      );

      ctx.reply(
        `–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.category}\n–°—É–º–º–∞: ${state.amount}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${state.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n–õ–æ–∫–∞—Ü–∏—è: ${text}`
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞:', error);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    delete userState[telegramId];
  }
});



bot.launch();
